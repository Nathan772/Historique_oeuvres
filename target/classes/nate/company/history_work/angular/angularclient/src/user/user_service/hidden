
/**
 cette méthode permet la suppresion d'un user.
 Elle est liée à
 removeUser de UserController.java.
 la méthode delete réalise une requête avec l'@ :

http://localhost:8080/user
 */
  public delete(user: User) {
    console.log("On supprime un nouvel utilisateur : "+user);
    console.log("le user a pour pseudo : "+user.pseudo)
    //use the url associated deleteMapping of UserController
    return this.http.delete(this.usersUrl+"/delete/"+user.pseudo);
    //censé marcher : "http://localhost:8080/users/delete/302"
  } /*
     set data for the user, into the service
     */
  /* useless deprecated
  public setUser(userChosen:Observable<User>){
     return userChosen.subscribe(
      userFound => {
        this.userAccount = userFound;
      console.log("après ou avant ?")
      return true;
      }
    );
  }*/

    /* this method do a redirection to home page (mostly because the user is not connected or disconnected
      */
    /*redirectionToConnectionPage() {
        console.log("you're not connected : go back to login page");
         //not connected
         this.connectionService.isConnected = false;
         this.connectionService.alreadyExists = false
         this.connectionService.mismatchedPassword = false;
         //no user
         //this.userService.userAccount = null;

         //welcome page for connexion or inscription
         this.router.navigate(['/']);

      }*/

    /*
    this method update user connection status and data if it's necessary
    */
    public async prepareConnection(connectionService:ConnectionServiceService){
      //the user is not connected redirection to connection page
          //reload user from the same session (BEGIN)
          if(connectionService.isConnected == false && sessionStorage.getItem('userPseudo') == null){
            console.log("l'utilisateur n'est pas connecté")
            this.redirectionToConnectionPage(connectionService);
          }

          //the user is already connect, reload their data
          if(sessionStorage.getItem('userPseudo') !== null && connectionService.isConnected == false){
            console.log("la valeur du userPseudo "+sessionStorage.getItem('userPseudo'));
            //let userPseudo = JSON.parse(sessionStorage.getItem('userPseudo') || '{}');
            let userPseudo = sessionStorage.getItem('userPseudo') || "noUserFound";
            let userSimple:User = {
                  pseudo:userPseudo,
                  email:"none@gmail.com",
                  password:"none",
                  category:"average"
              }


            /* await handle asychronous response
            for the retrieve of the user
            source : https://stackoverflow.com/questions/63136965/how-to-wait-for-function-with-subscribe-to-finish-in-angular-8
            */
            this.userAccount = await this.findUser(userSimple).toPromise() || userSimple;
            //let isReady = this.setUser(userDataBase);


            console.log("le user récupéré vaut maintenant: "+this.userAccount.pseudo);
            //set connection "on";
            connectionService.isConnected = true;
          }
          console.log("le user est déjà connecté ");


          connectionService = connectionService;
          connectionService.isConnected = connectionService.isConnected;
          connectionService.alreadyExists = false;
          connectionService.mismatchedPassword = false;
          //reload user from the same session (END)
    }

